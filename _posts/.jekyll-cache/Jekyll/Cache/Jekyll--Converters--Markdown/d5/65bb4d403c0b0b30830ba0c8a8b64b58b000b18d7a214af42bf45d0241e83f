I"é<h1 id="lets-begin">lets begin</h1>
<p>So to start off, I want to make it very clear: Iâ€™ve had a lot of free time with the delightful social distancing from the Coronavirus (COVID-19) and decided to mess around with WSL, Raspberry Pi and the internet. I still have little to no real idea how to delve deep into the configurations for Jekyll, Apache and Raspiâ€¦ <strong>yet</strong>. My biggest trouble was actually hosting Jekyll on my Apache server, but Iâ€™m getting ahead of myself (more on that later).</p>

<h2 id="disclaimer">disclaimer</h2>
<p>A lot of this information is regurgitated and repurposed from the already easy-to-follow <a href="https://jekyllrb.com/docs/">Jekyll Quickstart Guide</a>, and really itâ€™s worth a read in of itself. The step-by-step tutorial is actually fantastic to learn how the basic structures of Jekyll work, as well as how .yml files should be formatted (this will definitely help debugging later on!).</p>

<h2 id="what-youll-need">what youâ€™ll need</h2>
<p><br /></p>
<ul>
  <li>some form of hardware (it could be a Raspi like me (I used the A+ with WIFI), the old PC I know you have in a corner unused and unloved, or just your laptop because you thought youâ€™d give it a go and have no real issue with learning the skills to file away for later use).</li>
  <li>a server platform of some sort (NGINX, or Apache seem to be the favourites)</li>
  <li>a desire to host some form of /static/ website</li>
  <li>ruby</li>
  <li>jekyll
<br />
<br />
<br />
So, lets assume you already have hardware ready to go, if not and youâ€™re using a Raspi (any model), the single greatest resource I have found for frankensteining a server out of it can be found at <a href="https://habilisbest.com/category/Raspberry Pi">Habilis Best</a> and follow the secure personal server tutorials. Even if you have no desire to deploy your server to the internet, HB shows lots of tips and tricks to make sure youâ€™re the only person who can authorise any form of elevated functions. The man is a hero. After all your <code class="highlighter-rouge">sudo apt-get update</code> and <code class="highlighter-rouge">sudo apt-get upgrade</code>â€™s that you might be performing (of course Iâ€™m using debian as my server distro) I tend to start with a clean install of ruby. I envoke <code class="highlighter-rouge">sudo apt-get install ruby-full build-essential</code> and the wait for the full installation.</li>
</ul>

<p>Once Ruby has installed, you can check the other pre-requisites <em>GCC</em> and <em>Make</em>, which you can run <code class="highlighter-rouge">gcc -v</code>/<code class="highlighter-rouge">g++ -v</code> and <code class="highlighter-rouge">make -v</code> to see what version you are running (or to check whether you have it installed). If anything comes up as being unrecognised, or not installed, a simple run of <code class="highlighter-rouge">sudo apt-get install [gcc]/[make]/[any other package] -y</code> will automatically download and install the latest version.</p>

<p>Right, youâ€™ve got Ruby, youâ€™ve got the other packages, itâ€™s time to install Jekyll right? <em>Wrong</em>. The next part will allow you as the logged in user to run Ruby Gems (little self-contained programs) as opposed to only the root (or super) user.</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>echo '# Install Ruby Gems to ~/gems' &gt;&gt; ~/.bashrc
echo 'export GEM_HOME="$HOME/gems"' &gt;&gt; ~/.bashrc
echo 'export PATH="$HOME/gems/bin:$PATH"' &gt;&gt; ~/.bashrc
source ~/.bashrc
</code></pre></div></div>
<p>Now we can finally install Jekyll by running <code class="highlighter-rouge">gem install jekyll bundler</code>. Iâ€™ve found that this part takes the longest time. Go grab a cuppa and weâ€™ll continue soonâ€¦
<br /></p>
<hr />

:ET